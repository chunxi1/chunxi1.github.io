{"meta":{"title":"Chunxi's Blog","subtitle":"ababab","description":"","author":"Chunxi1","url":"https://clouddd.cc","root":"/"},"pages":[{"title":"所有分类","date":"2020-09-14T04:06:37.960Z","updated":"2020-09-14T04:06:37.960Z","comments":true,"path":"categories/index.html","permalink":"https://clouddd.cc/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-09-14T04:06:57.932Z","updated":"2020-09-14T04:06:57.932Z","comments":true,"path":"tags/index.html","permalink":"https://clouddd.cc/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-09-14T09:10:28.210Z","updated":"2020-09-14T09:10:28.210Z","comments":true,"path":"404.html","permalink":"https://clouddd.cc/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-09-14T04:05:40.387Z","updated":"2020-09-14T04:05:40.387Z","comments":true,"path":"about/index.html","permalink":"https://clouddd.cc/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"","date":"2020-09-14T04:07:13.168Z","updated":"2020-09-14T04:07:13.168Z","comments":true,"path":"mylist/index.html","permalink":"https://clouddd.cc/mylist/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-09-14T04:12:54.654Z","updated":"2020-09-14T04:12:54.654Z","comments":true,"path":"friends/index.html","permalink":"https://clouddd.cc/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"大数据搭建","slug":"bigdata","date":"2019-01-10T16:00:00.000Z","updated":"2020-09-07T16:00:00.000Z","comments":true,"path":"2019/01/11/bigdata/","link":"","permalink":"https://clouddd.cc/2019/01/11/bigdata/","excerpt":"云主机创建在平台 管理员 - 系统 - 云主机类型 创建云主机类型：","text":"云主机创建在平台 管理员 - 系统 - 云主机类型 创建云主机类型： 名称 VCPU 内存 根磁盘 4g 2 4096MB 100G 8g 2 8192MB 100G 在 项目 - 计算 - 云主机 创建云主机： Instance Name 源 flavor 网络 master ContOS_7.2 8g int slave ContOS_7.2 4g int 为两台云主机分别绑定浮动IP (本文以 master:192.168.200.102, slave:192.168.200.103 为示例) 配置主机名master节点 hostnamectl set-hostname master slave节点 hostnamectl set-hostname slave 配置 hosts双节点 vi /etc/hosts 注意：1.其中保持 ip 与在云主机绑定的 int 内网 ip 一致2.主机名映射采用FQDN格式。 互相 ping 测试 hosts 文件联通性 master节点 ping slave.hadoop slave节点 ping master.hadoop 修改 yum 源安装软件采用 ftp 的方式获取 yum 仓库,在 controller节点 将 XianDian-BigData-v2.2.iso 挂载复制到 /opt/ambari 下 双节点 rm -rf /etc/yum.repos.d/* vi /etc/yum.repos.d/ambari.repo yum clean all yum list master节点 yum install httpd -y 从 controller节点 将 /opt/ambari 文件夹中 HDP-2.6.1.0 和 HDP-UTILS-1.1.0.21 两个文件夹拷贝到 master节点 /var/www/html 目录下。 controller节点 scp -r /opt/ambari/HDP-2.6.1.0/ 192.168.200.102:/var/www/html scp -r /opt/ambari/HDP-UTILS-1.1.0.21/ 192.168.200.102:/var/www/html 开启httpd master节点 systemctl start httpd systemctl enable httpd systemctl status httpd 安装ntp master节点 yum install ntp -y vi /etc/ntp.conf 注释以下四行添加： server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst 添加以下两行： server 127.127.1.0 fudge 127.127.1.0 stratum 10 开启ntpd systemctl start ntpd systemctl enable ntpd slave节点 yum install ntpdate -y systemctl enable ntpdate ntpdate master.hadoop 禁用Transparent Huge Pages:双节点 [root@master ~]# cat /sys/kernel/mm/transparent_hugepage/enabled [always] madvise never [root@master ~]# echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled [root@master ~]# echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag [root@master ~]# cat /sys/kernel/mm/transparent_hugepage/enabled always madvise [never] 安装Java JDK将 controller节点 的 jdk 安装包复制到 master 和 slave 的 /opt 下 controller节点 scp -r /opt/ambari/jdk-8u77-linux-x64.tar.gz 192.168.200.102://opt/ scp -r /opt/ambari/jdk-8u77-linux-x64.tar.gz 192.168.200.103://opt/ 双节点 解压 jdk： mkdir /usr/jdk64/ tar -zxvf /opt/jdk-8u77-linux-x64.tar.gz -C /usr/jdk64/ 编辑环境变量： vi /etc/profile 首行添加两行： export JAVA_HOME=/usr/jdk64/jdk1.8.0_77/ export PATH=$JAVA_HOME/bin:$PATH 验证： source /etc/profile java -version 配置ambari-servermaster节点 yum install ambari-server -y 安装 MariaDB 数据库 yum install mariadb mariadb-server mysql-connector-java -y systemctl enable mariadb systemctl start mariadb 配置 MariaDB mysql_secure_installation 第一个直接 &#8629; ，设置密码 bigdata 之后 yes、no、yes、yes Enter current password for root (enter for none): Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! Remove anonymous users? [Y/n] y ... Success! Disallow root login remotely? [Y/n] n ... skipping. Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reload privilege tables now? [Y/n] y ... Success! Thanks for using MariaDB! 创建 ambari 数据库 mysql -uroot -pbigdata 在 mariadb 中执行以下操作 create database ambari; grant all privileges on ambari.* to &#39;ambari&#39;@&#39;localhost&#39; identified by &#39;bigdata&#39;; grant all privileges on ambari.* to &#39;ambari&#39;@&#39;%&#39; identified by &#39;bigdata&#39;; use ambari; source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql quit; 安装配置ambari-servermaster节点 vi /etc/profile 添加一行： export buildNumber=2.6.0.0 安装ambari-server ambari-server setup 配置选项： Customize user account for ambari-server daemon [y/n] (n)? n [1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8 [2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7 [3] Custom JDK ============================================================================== Enter choice (1): 3 Path to JAVA_HOME: /usr/jdk64/jdk1.8.0_77/ Enter advanced database configuration [y/n] (n)? y Choose one of the following options: [1] - PostgreSQL (Embedded) [2] - Oracle [3] - MySQL / MariaDB [4] - PostgreSQL [5] - Microsoft SQL Server (Tech Preview) [6] - SQL Anywhere [7] - BDB ============================================================================== Enter choice (1): 3 Hostname (localhost): #回车默认 Port (3306): #回车默认 Database name (ambari): #回车默认 Username (ambari): #回车默认 Enter Database Password (bigdata): #回车默认 Proceed with configuring remote database connection properties [y/n] (y)? y Adjusting ambari-server permissions and ownership... Ambari Server &#39;setup&#39; completed successfully. 配置 ambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java.jar 启动 ambari-server 服务 ambari-server start 配置ambari-agent双节点 yum install ambari-agent -y vi /etc/ambari-agent/conf/ambari-agent.ini 修改如下样式： [server] hostname=master.hadoop 重启、监视： ambari-agent restart tail -f /var/log/ambari-agent/ambari-agent.log 进入平台进入先电大数据平台(http://master:8080) 用户名、密码：admin admin 启动安装向导 名称： HDP 接着下一步 选择版本 安装选项 确认主机直接下一步 选择服务选择 HDFS YARN+MapReduce2 Ambari Metrics 下一步 分配 Master 分配 Slaves 和 Clients 自定义服务这里填入密码 000000 到最后下一步 最后到概括直接部署，等待安装。完毕后两个主机全绿色就 ok 了 给个最后的截图：","categories":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/categories/%E5%85%88%E7%94%B5/"}],"tags":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/tags/%E5%85%88%E7%94%B5/"},{"name":"bigdata","slug":"bigdata","permalink":"https://clouddd.cc/tags/bigdata/"}],"author":{"name":"chunxi1","avatar":"https://cdn.jsdelivr.net/gh/chunxi1/links/imgs/head-img.png","url":"https://baidu.com"}},{"title":"Pass搭建","slug":"pass","date":"2018-12-04T16:00:00.000Z","updated":"2020-09-07T16:00:00.000Z","comments":true,"path":"2018/12/05/pass/","link":"","permalink":"https://clouddd.cc/2018/12/05/pass/","excerpt":"云主机创建在 项目 - 计算 - 云主机 创建云主机：","text":"云主机创建在 项目 - 计算 - 云主机 创建云主机： Instance Name 源 flavor 网络 server ContOS_7.2 m1.medium int client ContOS_7.2 m1.medium int 为两台云主机分别绑定浮动IP (本文以 client:192.168.200.102, server:192.168.200.103 为示例) 配置主机名server节点 hostnamectl set-hostname server client节点 hostnamectl set-hostname client 配置 hosts双节点 vi /etc/hosts 添加以下内容： 192.168.200.102 client 192.168.200.103 server 互相 ping 测试 hosts 文件联通性 server节点 ping client client节点 ping server 关闭防火墙、配置 iptables双节点 systemctl stop firewalld systemctl disable firewalld 配置 iptables iptables -L # 查看 iptables -F # 规则 iptables -X # 策略 iptables -Z # 用户数据 修改系统内核文件双节点 vi /etc/sysctl.conf 添加以下内容： net.ipv4.ip_forward = 1 net.ipv4.conf.default.rp_filter = 0 net.ipv4.conf.all.rp_filter = 0 检验： sysctl -p 配置yum源采用 ftp 的方式获取 yum 仓库,在 controller节点 将 XianDian-PaaS-v2.2.iso 挂载复制到 /opt/paas 下 双节点 rm -rf /etc/yum.repos.d/* vi /etc/yum.repos.d/ftp.repo 修改如下： [docker] name=docker baseurl=ftp://192.168.100.10/paas/docker gpgcheck=0 enabled=1 接着 yum clean all yum list 安装 docker双节点 yum install docker -y 修改 docker 仓库地址 vi /etc/sysconfig/docker 添加如下 ADD_REGISTRY=&#39;--add-registry 192.168.200.103:5000&#39; INSECURE_REGISTRY=&#39;--insecure-registry 192.168.200.103:5000&#39; 使配置生效 systemctl daemon-reload # 生效 systemctl start docker # 启动 systemctl enable docker # 开机自启 docker info # 查询地址是否修改正确 上传仓库地址使用镜像server节点 cd /opt/images/rancher1.6.5 导入 docker load -i registry_latest.tar load : 导入、加载、解压save:导出-i : 指定导入的文件，代替 STDIN-q : 精简输出信息 查看仓库镜像 docker images 创建容器 docker run -d -p 5000:5000 --restart=always --name registry docker.io/registry:latest Run: 创建一个新的容器并运行一个命令-d: 后台运行容器，并返回容器ID-p: 指定端口映射 查看一遍，根据 ID 打上标签 docker images docker tag &lt;ID&gt; 192.168.200.103:5000/registry:latest # c9bd19d022f6 tag: 标记本地镜像，将其归入某一仓库 推送 docker push 192.168.200.103:5000/registry:latest push: 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库docker rmi 镜像ID: 删除仓库 启动容器，命令：docker start 容器ID或容器名&gt;重启容器，命令：docker restart 容器ID或容器名&gt;停止容器，命令：docker stop 容器ID或容器名&gt;强制停止容器，命令：docker kill 容器ID或容器名 上传 rancher_server 服务 rancher_server_v1.6.5.tar docker load -i rancher_server_v1.6.5.tar docker images docker tag f89070da7581 192.168.200.103:5000/rancher/server:v1.6.5 # f89070da7581 docker push 192.168.200.103:5000/rancher/server:v1.6.5 docker run -d --restart=unless-stopped -p 8080:8080 rancher/server:v1.6.5 # 启动服务 docker logs -f &lt;进程ID&gt; # 查看 rancher_server 部署进程 此时可以进入网页 http://192.168.200.102:8080进入网页后停止日志信息 （ctrl+c） logs: 获取容器的日志-f: 跟踪日志输出–since: 显示某个开始时间的所有日志-t: 显示时间戳–tail: 仅列出最新N条容器日志 将images里所有的包都推送到仓库 rancher_agent_v1.2.5.tar docker load -i rancher_agent_v1.2.5.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/agent:v1.2.5 docker push 192.168.200.103:5000/rancher/agent:v1.2.5 rancher_dns_v0.15.1.tar docker load -i rancher_dns_v0.15.1.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/dns:v0.15.1 docker push 192.168.200.103:5000/rancher/dns:v0.15.1 rancher_healthcheck_v0.3.1.tar docker load -i rancher_healthcheck_v0.3.1.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/healthcheck:v0.3.1 docker push 192.168.200.103:5000/rancher/healthcheck:v0.3.1 rancher_metadata_v0.9.2.tar docker load -i rancher_metadata_v0.9.2.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/metadata:v0.9.2 docker push 192.168.200.103:5000/rancher/metadata:v0.9.2 rancher_net_holder.tar docker load -i rancher_net_holder.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/net:holder docker push 192.168.200.103:5000/rancher/net:holder rancher-net_v0.11.3.tar docker load -i rancher-net_v0.11.3.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/net:v0.11.3 docker push 192.168.200.103:5000/rancher/net:v0.11.3 rancher_network-manager_v0.7.4.tar docker load -i rancher_network-manager_v0.7.4.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/network-manager:v0.7.4 docker push 192.168.200.103:5000/rancher/network-manager:v0.7.4 rancher_scheduler_v0.8.2.tar docker load -i rancher_scheduler_v0.8.2.tar docker images docker tag &lt;ID&gt; 192.168.200.103:5000/rancher/scheduler:v0.8.2 docker push 192.168.200.103:5000/rancher/scheduler:v0.8.2 进入网页云计算基础架构服务平台(http://192.168.200.102:8080) 启动安全认证服务：ADMIN - Access Control - LOCAL 输入用户、密码后确定 设置镜像仓库地址： ADMIN-Settings ，下拉，找到 Advanced Settings 拉到最下点击：I understand that I can break things by changing advanced settings. Registry.default=192.168.200.103:5000(server节点) 可改网页为中文版本 创建进入 rancher default - 环境变量 - 添加环境 - 名称 - rancher - 创建default — rancher 添加主机： 回到网页页面：进入 rancher环境 点击 添加主机 - 点击 保存在第四步中写入 client节点 的外网网址 192.168.200.102把第五步的内容复制到 client节点 中运行一下 client节点 运行完成后回到网页点击 关闭 点击网页中 应用 - 基础设施 点 + 打开观察安装状态 选择 ADMIN - Access Controller ，选择 LOCAL 进行认证设置，如图1、图2 所示。 选择 ADMIN - Settings ，下拉到最下面，找到 Advanced Settings ，如图3、图4 所示。 打开 Advanced Settings ，下拉到最后设置仓库地址，如图5 所示。 选择 Default - 环境管理 ，点击添加环境，选择 Cattle环境模板，环境名称自定义，如图6 、图7 、图8 所示。 查看建立的环境状态， Active 状态为正常，如图9 所示。 切换到新建的环境，如图10 所示。 添加环境内的主机。添加主机之前要确保仓库中有agent服务的相关镜像，没有的话需要提前传到私有仓库中，clinet节点配置好私有仓库地址即可直接拉取。上传镜像到私有仓库完成后，点击添加主机，如图11 所示。 设置client节点的ip，并点击复制到粘贴板到client节点执行，如图12 所示。 切换到应用-基础环境，等待基础设施应用自动部署成功，如图是基础设施应用部署成功的效果，如图14 所示。","categories":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/categories/%E5%85%88%E7%94%B5/"}],"tags":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/tags/%E5%85%88%E7%94%B5/"},{"name":"paas","slug":"paas","permalink":"https://clouddd.cc/tags/paas/"}],"author":{"name":"hanhuicdx","avatar":"https://avatars0.githubusercontent.com/u/70937853?s=400&u=2e07e3b539074db9197060ae9d05226fd558b0e2&v=4","url":"https://github.com/anhuicdx"}},{"title":"Iaas搭建","slug":"iaas","date":"2018-09-30T16:00:00.000Z","updated":"2020-08-24T16:00:00.000Z","comments":true,"path":"2018/10/01/iaas/","link":"","permalink":"https://clouddd.cc/2018/10/01/iaas/","excerpt":"文中的 10节点 表示 controller节点，20节点 表示 compute节点；网卡名默认 eth0 和 enp7s0 表示内网， eth1 和 enp8s0 为外网 (相对服务器的内外网)。","text":"文中的 10节点 表示 controller节点，20节点 表示 compute节点；网卡名默认 eth0 和 enp7s0 表示内网， eth1 和 enp8s0 为外网 (相对服务器的内外网)。 如果不在虚拟机内搭建，跳到系统安装 虚拟机配置内容 VMware 配置双节点 Vmnet1 Vmnet8 双节点 开启虚拟机,禁用网卡命名规则,在开机界面按 &#8593; 键，选中 Install CentOS 7 再按下 Tab ,在后面添加代码(如下图): 1net.ifnames=0 biosdevname=0 系统安装 硬盘配置10节点 选择 I will configure 然后 Done 点击自动创建 硬盘比较大时 会自动生成 /home 分区，应删除，再将根目录分区也删除、再重新创建(重新创建以自动占满 /home 留下的空间)。 20节点 前面一样，后面在分区时，减小根分区，为后面的 cinder 和 swift 服务留空。服务器应为2个服务共 200 GB 、虚拟机可以留 20-10 GB (或者 20%)。 例如，这里是总共50 G 硬盘，默认分配之后，缩小10 G 网络配置双节点 配置两个节点的 eth0 (服务器默认是 enp7s0 )如下： 类似的，20节点同理。 最后，关闭打开前面的 On 保证刷新显示出来IP 。 然后开始安装 配置网络 双节点 1vi /etc/sysconfig/network-scripts/ifcfg-eth0 配置好之后应该是这样： 1cat /etc/sysconfig/network-scripts/ifcfg-eth0 10节点 20节点 理论上只用将 ONBOOT 改为 yes 就可以了 (在前面 网络配置 可能导致没有 IPADDR 等… 的 bug，按照上图修改就可以了)。 重启网络 1systemctl restart network 安装先电软件包 10节点 使用 SecureFX、Xftp 等 ftp 软件将 CentOS-7-x86_64-DVD-1511.iso 和 XianDian-IaaS-v2.2.iso 上传到/home里面 (当然镜像挂载的方法也可以)。 12345678mount /home/CentOS-7-x86_64-DVD-1511.iso /mntmkdir /opt/centos/mkdir /opt/iaas/cp -rvf /mnt/* /opt/centos/umount /mnt/mount /home/XianDian-IaaS-v2.2.iso /mntcp -rvf /mnt/* /opt/iaas/umount /mnt/ 设置10节点yum源10节点 12rm -rf /etc/yum.repos.d/* #把10节点的yum源移除vi /etc/yum.repos.d/centos.repo 验证: 12yum clean allyum list 安装ftp服务:10节点 12yum install vsftpd -yvi /etc/vsftpd/vsftpd.conf 在第一行添加: anon_root=/opt/ 启动ftp服务: 12systemctl start vsftpdsystemctl enable vsftpd 关闭防火墙并且使其开机不自启:双节点 12systemctl stop firewalldsystemctl disable firewalld 配置20节点yum源20节点 12mv /etc/yum.repos.d/* /opt/ #20节点的yum源在/opt下备份vi /etc/yum.repos.d/centos.repo 验证: 12yum clean allyum list 设置脚本环境变量:双节点 12yum install iaas-xiandian -yvi /etc/xiandian/openrc.sh (其中，第75行和89行是上面硬盘配置给cinder、swift留空的分区名称，具体名称以下面分区步骤之后的名称为准。) 可以将10节点编辑好的文件传到20节点上。 10节点 1scp /etc/xiandian/openrc.sh 192.168.100.20:///etc/xiandian 检验: 20节点 1cat /etc/xiandian/openrc.sh 为cinder和swift分区:20节点 以50 GB，每个服务给5 GB的方式为例。（具体大小看自己情况，仅参考） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081[root@localhost ~]# lsblk #列出所有可用块设备的信息NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 50G 0 disk ├─sda1 8:1 0 500M 0 part /boot└─sda2 8:2 0 39.5G 0 part └─centos-root 253:0 0 39.5G 0 lvm /sr0 11:0 1 1024M 0 rom [root@localhost ~]# [root@localhost ~]# [root@localhost ~]# parted /dev/sdaGNU Parted 3.1Using /dev/sdaWelcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.(parted)(parted) p #显示分区表、可用设备、可用空间、所有找到的分区或特定分区Model: VMware, VMware Virtual S (scsi)Disk /dev/sda: 53.7GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system Flags 1 1049kB 525MB 524MB primary xfs boot 2 525MB 43.0GB 42.4GB primary lvm(parted) (parted) mkpart cinder #创建分区parted: invalid token: cinderPartition type? primary/extended? p #主分区/扩展分区？扩展File system type? [ext2]? ext4 #Ext4——第四代扩展文件系统Start? 43.0GB #从上个分区的 End 开始（Number 2）End? 48.0GB #给 5 GB的空间(parted) (parted) p Model: VMware, VMware Virtual S (scsi)Disk /dev/sda: 53.7GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system Flags 1 1049kB 525MB 524MB primary xfs boot 2 525MB 43.0GB 42.4GB primary lvm 3 43.0GB 48.0GB 5046MB primary(parted)(parted) mkpart swiftparted: invalid token: swiftPartition type? primary/extended? pFile system type? [ext2]? ext4Start? 48.0GBEnd? 53.0GB(parted) (parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sda: 53.7GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system Flags 1 1049kB 525MB 524MB primary xfs boot 2 525MB 43.0GB 42.4GB primary lvm 3 43.0GB 48.0GB 5046MB primary 4 48.0GB 53.0GB 5001MB primary(parted) (parted) q #退出partedInformation: You may need to update /etc/fstab.[root@localhost ~]# [root@localhost ~]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 50G 0 disk ├─sda1 8:1 0 500M 0 part /boot├─sda2 8:2 0 39.5G 0 part │ └─centos-root 253:0 0 39.5G 0 lvm /├─sda3 8:3 0 4.7G 0 part #cinder分区└─sda4 8:4 0 4.7G 0 part #swift分区sr0 11:0 1 1024M 0 rom [root@localhost ~]# 最后生成的 cinder、swift 分区，填在上面脚本环境变量 openrc.sh 里面 ( (parted) h 可以查看parted命令帮助。) 安装脚本: 脚本执行是不可逆的，保证严格的顺序，执行错误就要重来。双节点脚本建议同时安装（虚拟机可以创建快照） 其中 […] 表示两个名字不同的脚本（例如 iaas-install-nova-controller.sh 和 iaas-install-nova-compute.sh。） 可以参照 openrc.sh 里面的顺序来安装 双节点 iaas-pre-host.sh 双节点 CRT断开连接重新登录一下 ( Ctrl + D ) 10节点 iaas-install-mysql.sh (数据库) 10节点 iaas-install-keystone.sh (认证服务) 10节点 iaas-install-glance.sh (镜像服务) 双节点 iaas-install-nova-co[…].sh (计算服务) 双节点 iaas-install-neutron-co[…].sh (网络服务) 双节点 iaas-install-neutron-co[…]-gre.sh (gre网络模式) 注意： 这里20节点安装 gre.sh 完成之后没有返回提示为正常；10节点安装最后会出现： Unknown operation ‘enabled’. 这是脚本错误，查看脚本文件： 1234cat /usr/local/bin/iaas-install-neutron-controller-gre.sh······systemctl restart neutron-lbaas-agentsystemctl enabled neutron-lbaas-agent enabled 改为 enable，执行 systemctl enable neutron-lbaas-agent 。 10节点 iaas-install-dashboard.sh (Dashboard服务) 这里安装完Dashboard服务可以跳转到上传镜像，这样安装的平台为最简安装 (之后的也可以以后安装) 双节点 iaas-install-cinder-co[…].sh (cinder块储存服务) 10节点 1source /etc/keystone/admin-openrc.sh 双节点 iaas-install-swift-co[…].sh (swift对象储存服务) 执行过程中需要确认登录 controller 节点和输入 controller 节点 root 用户密码 10节点 iaas-install-trove.sh (trove服务) 注意： 安装Trove服务之前需要配置好网络（flat 或 gre）,创建好子网，并确认系统已经安装 swift 和 cinder 两个服务，否则安装会失败。 10节点 iaas-install-heat.sh (heat编配服务) 双节点 iaas-install-ceilometer-co[…].sh (ceilometer监控服务) 10节点 iaas-install-alarm.sh (alarm监控服务) 上传镜像:10节点 12source /etc/keystone/admin-openrc.shcat /usr/local/bin/iaas-install-trove.sh 复制 iaas-install-trove.sh 尾部的一段代码，修改为如下执行： 1glance image-create --name &quot; CentOS_7.2_x86_64&quot; --disk-format qcow2 --container-format bare --progress &lt; /opt/iaas/images/CentOS_7.2_x86_64_XD.qcow2 进入平台: 点击下面链接： 云计算基础架构服务平台 一、规则:在 项目 - 计算 - 访问&amp;安全 删除全部规则 添加所有 ICMP协议 + 入&amp;出口 + 远程CIDR + 0.0.0.0/0所有 TCP 协议 + 入&amp;出口 + 远程CIDR + 0.0.0.0/0所有 UDP 协议 + 入&amp;出口 + 远程CIDR + 0.0.0.0/0 二、网络:在 管理员 - 系统 - 网络 创建① 名称 ext 项目 admin 类型 GRE 段ID 192 外部网络 之后在 ext 网络中创建 子网名称 ext-sub 网络地址: 192.168.200.0/24 网关IP: 192.168.200.1在详情页地址池:192.168.200.100,192.168.200.200 (100到200) 创建② 名称 int 项目 admin 类型 GRE 段ID 10创建子网 int-sub 地址 10.0.0.0/24 + 网关IP: 10.0.0.1在详情页地址池: 10.0.0.100,10.0.0.200 (100到200) 三、路由:在 项目 - 网络 - 路由新建路由 router 外部网络 ext之后在 router 中添加接口 子网 int：10.0.0.0/24 (int-sub) 在cmd中测试路由(ping 192.168.200.101) 整合资源: 10节点 修改 openrc.sh 把compute节点的IP和主机名改为controller节点的IP和主机名(20-&gt;10) 执行脚本 1iaas-install-nova-compute.sh 在平台 管理员 - 系统 - 虚拟机管理器 观察，主机名存在controller即操作成功。","categories":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/categories/%E5%85%88%E7%94%B5/"}],"tags":[{"name":"iaas","slug":"iaas","permalink":"https://clouddd.cc/tags/iaas/"},{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/tags/%E5%85%88%E7%94%B5/"}],"author":{"avatar":"https://cdn.jsdelivr.net/gh/chunxi1/links/imgs/head-img.png","name":"chunxi1","url":"https://clouddd.cc"}},{"title":"Hello World","slug":"hello-world","date":"2017-12-31T16:00:00.000Z","updated":"2020-08-24T16:00:00.000Z","comments":true,"path":"2018/01/01/hello-world/","link":"","permalink":"https://clouddd.cc/2018/01/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info.","categories":[],"tags":[],"author":{"name":"chunxi1","avatar":"https://cdn.jsdelivr.net/gh/chunxi1/links/imgs/head-img.png","url":"https://clouddd.cc"}}],"categories":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/categories/%E5%85%88%E7%94%B5/"}],"tags":[{"name":"先电","slug":"先电","permalink":"https://clouddd.cc/tags/%E5%85%88%E7%94%B5/"},{"name":"bigdata","slug":"bigdata","permalink":"https://clouddd.cc/tags/bigdata/"},{"name":"paas","slug":"paas","permalink":"https://clouddd.cc/tags/paas/"},{"name":"iaas","slug":"iaas","permalink":"https://clouddd.cc/tags/iaas/"}]}